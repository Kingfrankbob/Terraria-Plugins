using Terraria;
using System;
using TShockAPI;
using TerrariaApi.Server;
using System.Diagnostics.Contracts;
using TShockAPI.Hooks;
using Terraria.ID;
using System.Drawing;
using IL.Terraria;
using System.Text.RegularExpressions;
using Mono.Cecil.Cil;
using On.Terraria;
using IL.Terraria.GameContent.Dyes;

namespace CTG
{
    [ApiVersion(2, 1)]
    public class CTG : TerrariaPlugin
    {
        public override string Name => "Capture The Gem plugin!!!";
        public Dictionary<string, int> playerChoice = new Dictionary<string, int>();
        public CTG(Terraria.Main game) : base(game)
        {

        }
        public override void Initialize()
        {
            ServerApi.Hooks.GameInitialize.Register(this, WorldLoaded);
            //ServerApi.Hooks.GamePostInitialize.Register(this, OnPostInitialize);
            ServerApi.Hooks.NetGetData.Register(this, OnGetData);
            GetDataHandlers.PlayerTeam += PTCH;
            PlayerHooks.PlayerPostLogin += OnPlayerPostLogin;
        }

        private void WorldLoaded(EventArgs args)
        {
            Commands.ChatCommands.Add(new Command("CTG.j", join, "j", "join", "J"));
            Commands.ChatCommands.Add(new Command("CTG.start", start, "s", "start", "Start"));
            Commands.ChatCommands.Add(new Command("CTG.gp", getPos, "gp", "g", "getpos"));
            Commands.ChatCommands.Add(new Command("CTG.cl", setClass, "class"));
            Commands.ChatCommands.Add(new Command("CTG.rt", reset, "reset", "rs", "rt"));
        }

        public void join(CommandArgs args)
        {
            Console.WriteLine("Inside");
            if (args.Parameters[0] == null) return;
            if (args.Parameters[0] == "CTG")
            {
                TSPlayer player = args.Player;
                if (player != null)
                {
                    var group = TShock.Groups.GetGroupByName("CTGLOB");
                    if (group != null)
                    {
                        // Add the player to the temporary group
                        player.Group = group;
                    }
                }
            }
        }

        private void OnPlayerPostLogin(PlayerPostLoginEventArgs args)
        {
            var player = FindPlayerByName(args.Player.Name);
            if (player != null)
            {
                player.SendInfoMessage("Welcome back to the server!");
                player.SendInfoMessage("Please enjoy your stay!");
                player.Group = TShock.Groups.GetGroupByName("default");
                for (int i = 0; i < player.TPlayer.inventory.Length; i++)
                {
                    player.TPlayer.inventory[i].SetDefaults(0);
                    player.TPlayer.inventory[i].Prefix(-1);
                    Terraria.NetMessage.SendData((int)PacketTypes.PlayerSlot, -1, -1, null, player.Index, i);
                }
                player.GiveItem(4989, 1);
                player.GiveItem(4954, 1);
                player.TPlayer.inventory[48].Prefix(-1);
                player.TPlayer.armor[4] = player.TPlayer.inventory[48];
                player.TPlayer.armor[5] = player.TPlayer.inventory[49];
                for (int i = 0; i < player.TPlayer.inventory.Length; i++)
                {
                    Terraria.NetMessage.SendData((int)PacketTypes.PlayerSlot, -1, -1, null, player.Index, i);
                }

            }
        }

        public void setClass(CommandArgs args)
        {
            if (args.Parameters == null) return;
            if (args.Parameters[0] == null)
            {
                args.Player.SendErrorMessage("Please give a class!");
            }
            if (args.Parameters[0] == "random")
            {
                args.Player.SendMessage("Random Class selected!", Microsoft.Xna.Framework.Color.Yellow);
            }
            else if (Int16.Parse(args.Parameters[0]) > 0 && Int16.Parse(args.Parameters[0]) < 3)
            {
                switch (Int16.Parse(args.Parameters[0]))
                {
                    case 1:
                        playerChoice.Add(args.Player.Name, 1);
                        break;
                    case 2:
                        playerChoice.Add(args.Player.Name, 2);
                        break;
                }
            }
        }


        private TSPlayer FindPlayerByName(string playerName)
        {
            foreach (TSPlayer player in TShock.Players)
            {
                if (player?.Name == playerName)
                {
                    return player;
                }
            }
            return null;
        }

        public async void start(CommandArgs args)
        {
            var playercount = 0;
            foreach(var player in TShock.Players) 
            {
                if(player != null) 
                {
                    if(player.Group.Name == "CTGLOB")
                    {
                        player.Group = TShock.Groups.GetGroupByName("CTGGAME");
                        ++playercount;
                    }
                }
            }
            if(playercount < 2)
            {
                TShock.Utils.Broadcast("Not enough players!", Microsoft.Xna.Framework.Color.Yellow);
                return;
            }

            var perteam = (int)playercount / 2;
            var randomPlayers = new List<int>();
            var random = new Random();

            do
            {
                var next = random.Next(perteam);
                if (randomPlayers.Contains(next)) continue;
                randomPlayers.Add(next);

            } while(randomPlayers.Count < perteam);

            playercount = 0;
            var counter = 0;
            foreach(var player in TShock.Players)
            {
                if (player != null)
                {
                    if (player.Group.Name == "CTGGAME" && randomPlayers.Contains(counter))
                    {
                        player.SetTeam(1);
                        player.SetPvP(true);
                        ++playercount;
                        player.Teleport((float)38552.098, 5446, 3);
                    }
                    else if(player.Group.Name == "CTGGAME")
                    { 
                        player.SetTeam(3);
                        player.SetPvP(true);
                        player.Teleport((float)29365.686, 5446, 2);
                    }
                }
                ++counter;
            }
            TShock.Utils.Broadcast("You have 15 Seconds to choose your class!", Microsoft.Xna.Framework.Color.Yellow);
            TShock.Utils.Broadcast("Good Luck!", Microsoft.Xna.Framework.Color.Green);
            TShock.Groups.GetGroupByName("CTGGAME").AddPermission("CTG.cl");
            await Task.Delay(TimeSpan.FromSeconds(15));
            TShock.Groups.GetGroupByName("CTGGAME").RemovePermission("CTG.cl");
            TShock.Utils.Broadcast("Game Starting, Good Luck", Microsoft.Xna.Framework.Color.Yellow);
            foreach(var player in TShock.Players)
            {
                if(player == null) continue;
                if(player.Group.Name == "CTGGAME" &&  playerChoice.ContainsKey(player.Name))
                {
                    player.SendMessage("You have chosen class " + playerChoice[player.Name] + "!", Microsoft.Xna.Framework.Color.BlueViolet);
                    TShock.Utils.Broadcast("Set player" + player.Name, Microsoft.Xna.Framework.Color.Yellow);
                    setClassItem(player);
                }
                else if(player.Group.Name == "CTGGAME")
                {
                    var choice = random.Next(1, 2);
                    player.SendMessage("You have chosen class " + choice + "!", Microsoft.Xna.Framework.Color.BlueViolet);
                    TShock.Utils.Broadcast("Set player" + player.Name, Microsoft.Xna.Framework.Color.Yellow);
                    setClassItem(player);
                }
                else
                {
                    await Console.Out.WriteLineAsync("Not able to happen?!");
                }
            }
        }

        private void setClassItem(TSPlayer player)
        {
            if (player == null) return;
            if(!playerChoice.ContainsKey(player.Name))
            {
                var random = new Random();
                playerChoice.Add(player.Name, random.Next(1, 2));
            }
            TShock.Utils.Broadcast("Set player before sswithc " + player.Name, Microsoft.Xna.Framework.Color.Yellow);
            switch (playerChoice[player.Name])
            {
                case 1:
                    classOne(player);
                    break;
                case 2:
                    break;
            }
            TShock.Utils.Broadcast("Made it out", Microsoft.Xna.Framework.Color.Yellow);
            return;
        }


        //RED POS: X:38552.098 Y:5446

        //BLUE POS: X:29365.686 Y:5446

        private void classOne(TSPlayer player)
        {

            player.GiveItem(ItemID.CrimsonHelmet, 1);
            player.GiveItem(ItemID.CrimsonScalemail, 1);
            player.GiveItem(ItemID.CrimsonGreaves, 1);

            player.TPlayer.armor[0].Prefix(-1);
            player.TPlayer.armor[1].Prefix(-1);
            player.TPlayer.armor[2].Prefix(-1);

            player.GiveItem(ItemID.LeadBroadsword, 1);

            player.GiveItem(ItemID.CopperPickaxe, 1);

            player.GiveItem(ItemID.WhoopieCushion, 1);
            return;
        }

        public void getPos(CommandArgs args)
        {
            var Player = TShock.Players[0];
            Console.WriteLine(Player.X + " " + Player.Y + " " + Player.Name);
        }


        private void OnGetData(GetDataEventArgs args)
        {
            if(!args.Handled &&( args.MsgID == PacketTypes.TogglePvp || args.MsgID == PacketTypes.ToggleParty))
            {
                var Player = TShock.Players[args.Msg.whoAmI];

                if(!Player.Group.HasPermission("pvp.toggle") || Player.Group.HasPermission("tshock.party.toggle"))
                {
                    args.Handled = true;
                    Player.SetPvP(true, false);
                    Player.SendErrorMessage("You do not have permission to change this setting");
                }
            }
        }
        
        public void reset(CommandArgs args)
        {
            foreach(var player in TShock.Players)
            {
                player.Group = TShock.Groups.GetGroupByName("default");
            }
        }
        
        private void PTCH(object sender, GetDataHandlers.PlayerTeamEventArgs e)
        {
            TSPlayer player = TShock.Players[e.PlayerId];
            if(player != null && player.Active)
            {
                e.Handled = true;
                player.SendErrorMessage("You cannot change this setting");
                return;
            }
        }






















        public void CreateGroup(string groupName, string groupPrefix, string groupSuffix, int groupParent)
        {
            // Check if the group already exists
            if (TShock.Groups.GroupExists(groupName))
            {
                // Group already exists, handle accordingly
                Console.WriteLine($"Group '{groupName}' already exists.");
                return;
            }

            // Create a new group with the specified details
            var newGroup = new TShockAPI.Group(groupname: "CTGLobby");

            // Add the new group to the TShock groups list
            TShock.Groups.AddGroup("CTGLobby", "default", "", "Blue");

            // Save the changes to the TShock config


            Console.WriteLine($"Group '{groupName}' created successfully.");
        }

        //// Usage example
        //string groupName = "MyNewGroup";
        //string groupPrefix = "[New]";
        //string groupSuffix = "(N)";
        //int parentGroupID = TShockAPI.Groups.GroupIDs["Default"]; // Parent group ID, modify as needed
        //CreateGroup(groupName, groupPrefix, groupSuffix, parentGroupID);



        private int[] GetOwnerAdminIndices()
        {
            var ownerGroup = TShock.Groups.GetGroupByName("owner");
            var adminGroup = TShock.Groups.GetGroupByName("admin");

            int[] ownerAdminIndices = new int[TShock.Players.Length];
            int count = 0;

            for (int i = 0; i < TShock.Players.Length; i++)
            {
                if (TShock.Players[i] != null &&
                    (TShock.Players[i].Group == ownerGroup || TShock.Players[i].Group == adminGroup))
                {
                    ownerAdminIndices[count] = i;
                    count++;
                }
            }

            // Resize the array to the actual count of owner/admin indices
            System.Array.Resize(ref ownerAdminIndices, count);

            return ownerAdminIndices;
        }

        public override Version Version => new Version(0, 1);
        public override string Author => "Michael Cragun";
        public override string Description => "A simple plugin for my home server, with the CTG implementation";

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {

            }
            base.Dispose(disposing);
        }

    }
}
